diff -urN ./cs550-19s-proj3-team-19/cowtest.c ./xv6-pnu-4/cowtest.c
--- ./cs550-19s-proj3-team-19/cowtest.c	2020-06-18 23:55:31.764674800 +0900
+++ ./xv6-pnu-4/cowtest.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,178 +0,0 @@
-#include "types.h"
-#include "user.h"
-
-int global_array[2048] = {0};
-int global_var = 0;
-
-void testcase4(){
-    int pid;
-
-    printf(1,"\n----- Test case 4 -----\n");
-    printf(1,"[prnt] v1 --> ");
-    print_free_frame_cnt();
-
-    if((pid = fork()) == 0)
-    {
-        //child
-        sleep(100);
-        printf(1,"[chld] v4 --> ");
-        print_free_frame_cnt();
-        
-        global_array[0] = 222;
-        printf(1,"[chld] modified one element in the 1st page, global_array[0]=%d\n", global_array[0]);
-
-        printf(1,"[chld] v5 --> ");
-        print_free_frame_cnt();
-
-        global_array[2047] = 333;           
-        printf(1,"[chld] modified two elements in the 2nd page, global_array[2047]=%d\n", global_array[2047]);
-
-        printf(1,"[chld] v6 --> ");
-        print_free_frame_cnt();
-        
-        exit();
-    }
-    else 
-    {
-        //parent
-        printf(1,"[prnt] v2 --> ");
-        print_free_frame_cnt();
-        
-        global_array[0] = 111;     
-        printf(1,"[prnt] modified one element in the 1st page, global_array[0]=%d\n", global_array[0]);
-
-        printf(1,"[prnt] v3 --> ");
-        print_free_frame_cnt();
-    }
-
-    if (wait() != pid)
-    {
-        printf(1,"wait() error!");
-        exit();
-    }    
-
-    printf(1, "[prnt] v7 --> ");
-    print_free_frame_cnt();
-}
-
-void testcase3(){
-    int pid;
-
-    printf(1,"\n----- Test case 3 -----\n");
-    printf(1,"[prnt] v1 --> ");
-    print_free_frame_cnt();
-
-    if((pid = fork()) == 0)
-    {
-        //child
-        sleep(100);
-        printf(1,"[chld] v4 --> ");
-        print_free_frame_cnt();
-        
-        global_var = 100;
-        printf(1,"[chld] modified global_var, global_var=%d\n", global_var);
-        
-        printf(1,"[chld] v5 --> ");        
-        print_free_frame_cnt();
-        
-        exit();
-    }
-    else 
-    {
-        //parent
-        printf(1,"[prnt] v2 --> ");
-        print_free_frame_cnt();
-        
-        printf(1,"[prnt] read global_var, global_var=%d\n", global_var);
-
-        printf(1,"[prnt] v3 --> ");
-        print_free_frame_cnt();
-    }
-    
-    if (wait() != pid)
-    {
-        printf(1,"wait() error!");
-        exit();
-    }    
-
-    printf(1, "[prnt] v6 -->  ");
-    print_free_frame_cnt();
-}
-
-void testcase2(){
-    int pid;
-    
-    printf(1,"\n----- Test case 2 -----\n");
-    printf(1,"[prnt] v1 ---> ");
-    print_free_frame_cnt();
-
-    if((pid = fork()) == 0)
-    {
-        //child
-        sleep(100);
-        printf(1,"[chld] v3 ---> ");
-        print_free_frame_cnt();
-        
-        printf(1,"[chld] read global_var, global_var=%d\n", global_var);
-        
-        printf(1,"[chld] v4 ---> ");
-        print_free_frame_cnt();
-        
-        exit();
-    }
-    else 
-    {
-        //parent
-        printf(1,"[prnt] v2 ---> ");
-        print_free_frame_cnt();
-    }
-    
-    if (wait() != pid)
-    {
-        printf(1,"wait() error!");
-        exit();
-    }    
-
-    printf(1, "[prnt] v5 --> ");
-    print_free_frame_cnt();
-}
-
-void testcase1(){
-    int pid;
-
-    printf(1,"\n----- Test case 1 -----\n");
-    printf(1,"[prnt] v1 --> ");
-    print_free_frame_cnt();
-    
-    if((pid = fork()) == 0)
-    {
-        //child
-        sleep(100);        
-        printf(1, "[chld] v2 --> ");
-        print_free_frame_cnt();
-        exit();
-    }
-    else 
-    {
-        //parent
-        printf(1, "[prnt] v3 --> ");
-        print_free_frame_cnt();
-    }
-    
-    if (wait() != pid)
-    {
-        printf(1, "wait() error!");
-        exit();
-    }
-    
-    printf(1, "[prnt] v4 --> ");
-    print_free_frame_cnt();
-}
-
-int main(){
-    testcase1();
-    testcase2();
-    testcase3();
-    testcase4();
-    exit();
-}
diff -urN ./cs550-19s-proj3-team-19/.cvsignore ./xv6-pnu-4/.cvsignore
--- ./cs550-19s-proj3-team-19/.cvsignore	1970-01-01 09:00:00.000000000 +0900
+++ ./xv6-pnu-4/.cvsignore	2019-05-21 23:37:15.000000000 +0900
@@ -0,0 +1,16 @@
+*.asm
+*.d
+*.sym
+_*
+kernel
+user1
+userfs
+usertests
+xv6.img
+vectors.S
+bochsout.txt
+bootblock
+bootother
+bootother.out
+parport.out
+fmt
diff -urN ./cs550-19s-proj3-team-19/defs.h ./xv6-pnu-4/defs.h
--- ./cs550-19s-proj3-team-19/defs.h	2020-06-19 03:01:45.794557400 +0900
+++ ./xv6-pnu-4/defs.h	2019-05-21 23:37:15.000000000 +0900
@@ -68,10 +68,7 @@
 void            kfree(char*);
 void            kinit1(void*, void*);
 void            kinit2(void*, void*);
-int 			num_Free_Frames(void);
-void 			increase_Page_Reference_Count(uint pa);
-void 			decrease_Page_Reference_Count(uint pa);
-uint 			get_Page_Reference_Count(uint pa);
+int				freemem(void);
 
 // kbd.c
 void            kbdintr(void);
@@ -190,9 +187,5 @@
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
 
-void flush_tlb_all(void); // xv6 proj - cow
-
-void page_Fault(uint err_code);
-
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff -urN ./cs550-19s-proj3-team-19/.dir-locals.el ./xv6-pnu-4/.dir-locals.el
--- ./cs550-19s-proj3-team-19/.dir-locals.el	1970-01-01 09:00:00.000000000 +0900
+++ ./xv6-pnu-4/.dir-locals.el	2019-05-21 23:37:15.000000000 +0900
@@ -0,0 +1,4 @@
+((c-mode
+  (indent-tabs-mode . nil)
+  (c-file-style . "bsd")
+  (c-basic-offset . 2)))
diff -urN ./cs550-19s-proj3-team-19/.gdbinit.tmpl ./xv6-pnu-4/.gdbinit.tmpl
--- ./cs550-19s-proj3-team-19/.gdbinit.tmpl	1970-01-01 09:00:00.000000000 +0900
+++ ./xv6-pnu-4/.gdbinit.tmpl	2019-05-21 23:37:15.000000000 +0900
@@ -0,0 +1,27 @@
+set $lastcs = -1
+
+define hook-stop
+  # There doesn't seem to be a good way to detect if we're in 16- or
+  # 32-bit mode, but in 32-bit mode we always run with CS == 8 in the
+  # kernel and CS == 35 in user space
+  if $cs == 8 || $cs == 35
+    if $lastcs != 8 && $lastcs != 35
+      set architecture i386
+    end
+    x/i $pc
+  else
+    if $lastcs == -1 || $lastcs == 8 || $lastcs == 35
+      set architecture i8086
+    end
+    # Translate the segment:offset into a physical address
+    printf "[%4x:%4x] ", $cs, $eip
+    x/i $cs*16+$eip
+  end
+  set $lastcs = $cs
+end
+
+echo + target remote localhost:1234\n
+target remote localhost:1234
+
+echo + symbol-file kernel\n
+symbol-file kernel
diff -urN ./cs550-19s-proj3-team-19/.gitignore ./xv6-pnu-4/.gitignore
--- ./cs550-19s-proj3-team-19/.gitignore	2020-06-18 23:55:31.489092300 +0900
+++ ./xv6-pnu-4/.gitignore	2019-05-21 23:37:15.000000000 +0900
@@ -1,21 +1,16 @@
-
-fs.img
-mkfs
-
-.cvsignore
-.dir-locals.el
-.gdbinit.tmpl
-.gdbinit
-
+*~
 _*
-*.d
 *.o
+*.d
 *.asm
 *.sym
-*.out
-kernel
+*.img
+vectors.S
 bootblock
 entryother
 initcode
-vectors.S
-xv6.img
+initcode.out
+kernel
+kernelmemfs
+mkfs
+.gdbinit
diff -urN ./cs550-19s-proj3-team-19/kalloc.c ./xv6-pnu-4/kalloc.c
--- ./cs550-19s-proj3-team-19/kalloc.c	2020-06-19 03:00:52.231789400 +0900
+++ ./xv6-pnu-4/kalloc.c	2019-05-21 23:58:40.000000000 +0900
@@ -1,5 +1,5 @@
 // Physical memory allocator, intended to allocate
-// memory for user processes, kernel stacks, page table pages,
+// memory for user processes, kernel stacks, pgae table pages,
 // and pipe buffers. Allocates 4096-byte pages.
 
 #include "types.h"
@@ -12,6 +12,7 @@
 void freerange(void *vstart, void *vend);
 extern char end[]; // first address after kernel loaded from ELF file
                    // defined by the kernel linker script in kernel.ld
+int numfreepages = 0;
 
 struct run {
   struct run *next;
@@ -21,11 +22,8 @@
   struct spinlock lock;
   int use_lock;
   struct run *freelist;
-  uint page_Reference_Count[PHYSTOP >> PGSHIFT];
 } kmem;
 
-int free_frame_cnt = 0; // xv6 proj - cow
-
 // Initialization happens in two phases.
 // 1. main() calls kinit1() while still using entrypgdir to place just
 // the pages mapped by entrypgdir on free list.
@@ -36,7 +34,6 @@
 {
   initlock(&kmem.lock, "kmem");
   kmem.use_lock = 0;
-  free_frame_cnt = 0;
   freerange(vstart, vend);
 }
 
@@ -52,10 +49,8 @@
 {
   char *p;
   p = (char*)PGROUNDUP((uint)vstart);
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE){
-    kmem.page_Reference_Count[V2P(p) >> PGSHIFT] = 0;  //Initializing the reference count to 0
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
     kfree(p);
-  }
 }
 //PAGEBREAK: 21
 // Free the page of physical memory pointed at by v,
@@ -70,21 +65,15 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
     panic("kfree");
 
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+
   if(kmem.use_lock)
     acquire(&kmem.lock);
+  numfreepages++;
   r = (struct run*)v;
-
-  if(kmem.page_Reference_Count[V2P(v) >> PGSHIFT] > 0)         // Decrement the reference count of a page whenever it is freed
-    --kmem.page_Reference_Count[V2P(v) >> PGSHIFT];
-
-  if(kmem.page_Reference_Count[V2P(v) >> PGSHIFT] == 0){       // Free the page only if there are no references to the page
-    // Fill with junk to catch dangling refs.
-    memset(v, 1, PGSIZE);
-    free_frame_cnt++;       // Increment the number of free pages by 1 when a page is freed
-    r->next = kmem.freelist;
-    kmem.freelist = r;
-
-  }
+  r->next = kmem.freelist;
+  kmem.freelist = r;
   if(kmem.use_lock)
     release(&kmem.lock);
 }
@@ -99,54 +88,16 @@
 
   if(kmem.use_lock)
     acquire(&kmem.lock);
+  numfreepages--;
   r = kmem.freelist;
   if(r)
-  {
     kmem.freelist = r->next;
-	free_frame_cnt--; // xv6 proj - cow. Decrement the number of free pages by 1 on a page allocation
-  kmem.page_Reference_Count[V2P((char*)r) >> PGSHIFT] = 1; //Reference count is set to 1 upon allocation
-  }
   if(kmem.use_lock)
     release(&kmem.lock);
   return (char*)r;
 }
 
-int num_Free_Frames(void)
-{
-/*  acquire(&kmem.lock);
-  uint free_frame_cnt = free_frame_cnt;
-  release(&kmem.lock); */
-  return free_frame_cnt;
-}
-
-void decrease_Page_Reference_Count(uint pa)
-{
-  if(pa < (uint)V2P(end) || pa >= PHYSTOP)
-    panic("Decrement Reference Count of a Page");
-
-  acquire(&kmem.lock);
-  --kmem.page_Reference_Count[pa >> PGSHIFT];
-  release(&kmem.lock);
-}
-
-void increase_Page_Reference_Count(uint pa)
-{
-  if(pa < (uint)V2P(end) || pa >= PHYSTOP)
-    panic("Increment Reference Count of a Page");
-
-  acquire(&kmem.lock);
-  ++kmem.page_Reference_Count[pa >> PGSHIFT];
-  release(&kmem.lock);
+int freemem(){
+  return numfreepages;
 }
-uint get_Page_Reference_Count(uint pa)
-{
-  if(pa < (uint)V2P(end) || pa >= PHYSTOP)
-    panic("Retrieve the Reference Count of a Page");
-  uint count;
-
-  acquire(&kmem.lock);
-  count = kmem.page_Reference_Count[pa >> PGSHIFT];
-  release(&kmem.lock);
 
-  return count;
-}
diff -urN ./cs550-19s-proj3-team-19/LICENSE ./xv6-pnu-4/LICENSE
--- ./cs550-19s-proj3-team-19/LICENSE	1970-01-01 09:00:00.000000000 +0900
+++ ./xv6-pnu-4/LICENSE	2019-05-21 23:37:15.000000000 +0900
@@ -0,0 +1,24 @@
+The xv6 software is:
+
+Copyright (c) 2006-2017 Frans Kaashoek, Robert Morris, Russ Cox,
+                        Massachusetts Institute of Technology
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
diff -urN ./cs550-19s-proj3-team-19/Makefile ./xv6-pnu-4/Makefile
--- ./cs550-19s-proj3-team-19/Makefile	2020-06-19 03:06:01.910551400 +0900
+++ ./xv6-pnu-4/Makefile	2020-06-18 23:48:21.613873600 +0900
@@ -76,7 +76,7 @@
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -fno-omit-frame-pointer
 #CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -fvar-tracking -fvar-tracking-assignments -O0 -g -Wall -MD -gdwarf-2 -m32 -Werror -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
@@ -174,8 +174,6 @@
 	_usertests\
 	_wc\
 	_zombie\
-	_shutdown \
-	_cowtest \
 	_test1\
 	_test2\
 	_test3\
@@ -216,8 +214,7 @@
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-# CPUS := 2
-CPUS := 1
+CPUS := 1 
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff -urN ./cs550-19s-proj3-team-19/mmu.h ./xv6-pnu-4/mmu.h
--- ./cs550-19s-proj3-team-19/mmu.h	2020-06-18 23:55:32.137941700 +0900
+++ ./xv6-pnu-4/mmu.h	2019-05-21 23:37:15.000000000 +0900
@@ -45,9 +45,9 @@
 #define SEG_UCODE 3  // user code
 #define SEG_UDATA 4  // user data+stack
 #define SEG_TSS   5  // this process's task state
-#define SEG_KCPU  6 
+
 // cpu->gdt[NSEGS] holds the above segments.
-#define NSEGS     7
+#define NSEGS     6
 
 #ifndef __ASSEMBLER__
 // Segment Descriptor
diff -urN ./cs550-19s-proj3-team-19/proc.c ./xv6-pnu-4/proc.c
--- ./cs550-19s-proj3-team-19/proc.c	2020-06-18 23:55:32.243454700 +0900
+++ ./xv6-pnu-4/proc.c	2019-05-21 23:37:15.000000000 +0900
@@ -164,16 +164,10 @@
   sz = curproc->sz;
   if(n > 0){
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-    {
-      cprintf("Allocating pages failed!\n"); // xv6 proj - cow	
       return -1;
-    }
   } else if(n < 0){
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-    {
-      cprintf("Deallocating pages failed!\n"); // xv6 proj - cow
       return -1;
-    }
   }
   curproc->sz = sz;
   switchuvm(curproc);
@@ -332,21 +326,16 @@
   struct cpu *c = mycpu();
   c->proc = 0;
   
-  int ran = 0; // CS 350/550: to solve the 100%-CPU-utilization-when-idling problem
-  
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    ran = 0;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
-      ran = 1;
-      
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -363,9 +352,6 @@
     }
     release(&ptable.lock);
 
-    if (ran == 0){
-        halt();
-    }
   }
 }
 
diff -urN ./cs550-19s-proj3-team-19/proc.h ./xv6-pnu-4/proc.h
--- ./cs550-19s-proj3-team-19/proc.h	2020-06-18 23:55:32.255165900 +0900
+++ ./xv6-pnu-4/proc.h	2019-05-21 23:37:15.000000000 +0900
@@ -8,7 +8,6 @@
   int ncli;                    // Depth of pushcli nesting.
   int intena;                  // Were interrupts enabled before pushcli?
   struct proc *proc;           // The process running on this cpu or null
-  struct cpu *cpu;
 };
 
 extern struct cpu cpus[NCPU];
diff -urN ./cs550-19s-proj3-team-19/README ./xv6-pnu-4/README
--- ./cs550-19s-proj3-team-19/README	2020-06-18 23:55:31.517388400 +0900
+++ ./xv6-pnu-4/README	2019-05-21 23:37:15.000000000 +0900
@@ -1 +1,49 @@
-README
+xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
+Version 6 (v6).  xv6 loosely follows the structure and style of v6,
+but is implemented for a modern x86-based multiprocessor using ANSI C.
+
+ACKNOWLEDGMENTS
+
+xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
+to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
+2000)). See also http://pdos.csail.mit.edu/6.828/2016/xv6.html, which
+provides pointers to on-line resources for v6.
+
+xv6 borrows code from the following sources:
+    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
+    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
+    FreeBSD (ioapic.c)
+    NetBSD (console.c)
+
+The following people have made contributions: Russ Cox (context switching,
+locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
+Clements.
+
+We are also grateful for the bug reports and patches contributed by Silas
+Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, Nelson Elhage,
+Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter Froehlich, Yakir Goaron,
+Shivam Handa, Bryan Henry, Jim Huang, Alexander Kapshuk, Anders Kaseorg,
+kehao95, Wolfgang Keller, Eddie Kohler, Austin Liew, Imbar Marinescu, Yandong
+Mao, Hitoshi Mitake, Carmi Merimovich, Joel Nider, Greg Price, Ayan Shafqat,
+Eldar Sehayek, Yongming Shen, Cam Tenny, Rafael Ubal, Warren Toomey, Stephen Tu,
+Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas Wolovick, Grant Wu, Jindong
+Zhang, Icenowy Zheng, and Zou Chang Wei.
+
+The code in the files that constitute xv6 is
+Copyright 2006-2016 Frans Kaashoek, Robert Morris, and Russ Cox.
+
+ERROR REPORTS
+
+Please send errors and suggestions to Frans Kaashoek and Robert Morris
+(kaashoek,rtm@mit.edu). The main purpose of xv6 is as a teaching
+operating system for MIT's 6.828, so we are more interested in
+simplifications and clarifications than new features.
+
+BUILDING AND RUNNING XV6
+
+To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run
+"make". On non-x86 or non-ELF machines (like OS X, even on x86), you
+will need to install a cross-compiler gcc suite capable of producing
+x86 ELF binaries. See http://pdos.csail.mit.edu/6.828/2016/tools.html.
+Then run "make TOOLPREFIX=i386-jos-elf-". Now install the QEMU PC
+simulator and run "make qemu".
diff -urN ./cs550-19s-proj3-team-19/shutdown.c ./xv6-pnu-4/shutdown.c
--- ./cs550-19s-proj3-team-19/shutdown.c	2020-06-18 23:55:32.469690000 +0900
+++ ./xv6-pnu-4/shutdown.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,11 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int 
-main(int argc, char * argv[])
-{
-    printf(1, "BYE~\n");
-    shutdown();
-    exit(); // return 0;
-}
diff -urN ./cs550-19s-proj3-team-19/syscall.c ./xv6-pnu-4/syscall.c
--- ./cs550-19s-proj3-team-19/syscall.c	2020-06-18 23:55:32.599452900 +0900
+++ ./xv6-pnu-4/syscall.c	2019-05-21 23:37:15.000000000 +0900
@@ -103,8 +103,8 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
-extern int sys_shutdown(void);
-extern int sys_print_free_frame_cnt(void);
+extern int sys_halt(void);
+extern int sys_freemem(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,8 +128,8 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
-[SYS_shutdown]      sys_shutdown,
-[SYS_print_free_frame_cnt]  sys_print_free_frame_cnt,
+[SYS_halt]    sys_halt,
+[SYS_freemem] sys_freemem
 };
 
 void
diff -urN ./cs550-19s-proj3-team-19/syscall.h ./xv6-pnu-4/syscall.h
--- ./cs550-19s-proj3-team-19/syscall.h	2020-06-18 23:55:32.631670400 +0900
+++ ./xv6-pnu-4/syscall.h	2019-05-21 23:37:15.000000000 +0900
@@ -20,5 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
-#define SYS_shutdown     22
-#define SYS_print_free_frame_cnt 23
+#define SYS_halt   22
+#define SYS_freemem 23
diff -urN ./cs550-19s-proj3-team-19/sysproc.c ./xv6-pnu-4/sysproc.c
--- ./cs550-19s-proj3-team-19/sysproc.c	2020-06-19 03:05:09.744481400 +0900
+++ ./xv6-pnu-4/sysproc.c	2019-05-21 23:37:15.000000000 +0900
@@ -7,8 +7,6 @@
 #include "mmu.h"
 #include "proc.h"
 
-//extern int free_frame_cnt; // xv6 proj - cow
-
 int
 sys_fork(void)
 {
@@ -92,16 +90,13 @@
   return xticks;
 }
 
-int sys_shutdown(void)
+int
+sys_halt(void)
 {
-  /* Either of the following will work. Does not harm to put them together. */
-  outw(0xB004, 0x0|0x2000); // working for old qemu
-  outw(0x604, 0x0|0x2000); // working for newer qemu
-  
+  outw(0xB004, 0x0|0x2000);
   return 0;
 }
 
-int sys_print_free_frame_cnt(void)
-{
-    return num_Free_Frames();
+int sys_freemem(void){
+   return freemem();
 }
diff -urN ./cs550-19s-proj3-team-19/test1.c ./xv6-pnu-4/test1.c
--- ./cs550-19s-proj3-team-19/test1.c	2020-06-19 00:21:06.896608000 +0900
+++ ./xv6-pnu-4/test1.c	2018-06-04 16:40:52.000000000 +0900
@@ -10,11 +10,11 @@
 
 	printf(1, "TEST1: ");
 	
-	before = print_free_frame_cnt();
+	before = freemem();
 
 	pid = fork();
 	if(pid == 0){
-		after = print_free_frame_cnt();
+		after = freemem();
 		if(before - after == 68)
 			printf(1, "OK\n");
 		else
diff -urN ./cs550-19s-proj3-team-19/test2.c ./xv6-pnu-4/test2.c
--- ./cs550-19s-proj3-team-19/test2.c	2020-06-19 00:06:27.970956800 +0900
+++ ./xv6-pnu-4/test2.c	2018-06-04 16:41:53.000000000 +0900
@@ -10,7 +10,7 @@
 
 	printf(1, "TEST2: ");
 	
-	before = print_free_frame_cnt();
+	before = freemem();
 
 	pid = fork();
 	if(pid == 0){
@@ -20,8 +20,7 @@
 		wait();
 	}
 
-	after = print_free_frame_cnt();
-
+	after = freemem();
 	if(before == after)
 		printf(1, "OK\n");
 	else
diff -urN ./cs550-19s-proj3-team-19/test3.c ./xv6-pnu-4/test3.c
--- ./cs550-19s-proj3-team-19/test3.c	2020-06-19 00:06:58.074983400 +0900
+++ ./xv6-pnu-4/test3.c	2018-06-04 16:42:10.000000000 +0900
@@ -12,13 +12,13 @@
 
 	printf(1, "TEST3: ");
 	
-	before = print_free_frame_cnt();
+	before = freemem();
 
 	pid = fork();
 	if(pid == 0){
-		before = print_free_frame_cnt();
+		before = freemem();
 		global = 4;
-		after = print_free_frame_cnt();
+		after = freemem();
 		if(before - after == 1)
 			printf(1, "OK\n");
 		else
diff -urN ./cs550-19s-proj3-team-19/test4.c ./xv6-pnu-4/test4.c
--- ./cs550-19s-proj3-team-19/test4.c	2020-06-19 00:07:31.509683200 +0900
+++ ./xv6-pnu-4/test4.c	2018-06-04 16:42:20.000000000 +0900
@@ -14,11 +14,11 @@
 	printf(1, "TEST4: ");
 
 	for(i=0;i<10;i++){
-		before = print_free_frame_cnt();
+		before = freemem();
 		pid = fork();
 		if(pid == 0)
 			break;
-		after = print_free_frame_cnt();
+		after = freemem();
 
 		if(before - after == 1){
 			printf(1, "WRONG\n");
diff -urN ./cs550-19s-proj3-team-19/trapasm.S ./xv6-pnu-4/trapasm.S
--- ./cs550-19s-proj3-team-19/trapasm.S	2020-06-18 23:55:32.700414400 +0900
+++ ./xv6-pnu-4/trapasm.S	2019-05-21 23:37:15.000000000 +0900
@@ -30,10 +30,3 @@
   popl %ds
   addl $0x8, %esp  # trapno and errcode
   iret
-
-# xv6 proj - cow
-.globl flush_tlb_all
-flush_tlb_all:
-  movl %cr3,%eax
-  movl %eax, %cr3
-  ret
\ No newline at end of file
diff -urN ./cs550-19s-proj3-team-19/trap.c ./xv6-pnu-4/trap.c
--- ./cs550-19s-proj3-team-19/trap.c	2020-06-18 23:55:32.689679000 +0900
+++ ./xv6-pnu-4/trap.c	2019-05-22 00:06:53.000000000 +0900
@@ -12,7 +12,7 @@
 struct gatedesc idt[256];
 extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
-uint ticks;
+uint ticks, nflag;
 
 void
 tvinit(void)
@@ -47,9 +47,6 @@
   }
 
   switch(tf->trapno){
-  case T_PGFLT:       //Added a case to identify/handle a page fault
-    page_Fault(tf->err);
-    break;
   case T_IRQ0 + IRQ_TIMER:
     if(cpuid() == 0){
       acquire(&tickslock);
diff -urN ./cs550-19s-proj3-team-19/user.h ./xv6-pnu-4/user.h
--- ./cs550-19s-proj3-team-19/user.h	2020-06-19 03:09:31.459273400 +0900
+++ ./xv6-pnu-4/user.h	2019-05-21 23:37:15.000000000 +0900
@@ -23,6 +23,8 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int halt(void) __attribute__((noreturn));
+int freemem(void);
 
 // ulib.c
 int stat(char*, struct stat*);
@@ -37,5 +39,3 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
-void shutdown(void);
-int print_free_frame_cnt(void);
diff -urN ./cs550-19s-proj3-team-19/usys.S ./xv6-pnu-4/usys.S
--- ./cs550-19s-proj3-team-19/usys.S	2020-06-18 23:55:32.802244700 +0900
+++ ./xv6-pnu-4/usys.S	2019-05-21 23:37:15.000000000 +0900
@@ -29,5 +29,5 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
-SYSCALL(shutdown)
-SYSCALL(print_free_frame_cnt)
+SYSCALL(halt)
+SYSCALL(freemem)
diff -urN ./cs550-19s-proj3-team-19/vm.c ./xv6-pnu-4/vm.c
--- ./cs550-19s-proj3-team-19/vm.c	2020-06-18 23:55:32.834452300 +0900
+++ ./xv6-pnu-4/vm.c	2019-05-22 00:07:06.000000000 +0900
@@ -9,7 +9,7 @@
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
-
+uint pflag;
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
@@ -26,10 +26,7 @@
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-  //Map CPU and procs which are private per cpu
-  c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
   lgdt(c->gdt, sizeof(c->gdt));
-  loadgs(SEG_KCPU << 3);
 }
 
 // Return the address of the PTE in page table pgdir
@@ -321,30 +318,27 @@
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
-  //char *mem;
+  char *mem;
 
   if((d = setupkvm()) == 0)
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-      panic("copyuvm: PTE should exist");
+      panic("copyuvm: pte should exist");
     if(!(*pte & PTE_P))
-      panic("copyuvm: Page not present");
-     *pte &= ~PTE_W; 
+      panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
-    flags = PTE_FLAGS(*pte);         
-    if(mappages(d, (void*)i, PGSIZE, pa, flags) < 0)
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
       goto bad;
-    increase_Page_Reference_Count(pa);
   }
-  lcr3(V2P(pgdir));                     // Flush TLB for original process
-      
-  
   return d;
 
 bad:
   freevm(d);
-  lcr3(V2P(pgdir));
   return 0;
 }
 
@@ -396,69 +390,3 @@
 //PAGEBREAK!
 // Blank page.
 
-void page_Fault(uint err_code)
-{
-
-
-    // get the faulting virtual address from the CR2 register
-    uint va = rcr2();
-    pte_t *pte;
-
-    // Error Handling code
-    if(myproc() == 0){
-      cprintf("Page fault with no user process");
-      panic("Page Fault!");
-    }
-
-    if(va >= KERNBASE || (pte = walkpgdir(myproc()->pgdir, (void*)va, 0)) == 0  ||
-        !(*pte & PTE_P) || !(*pte & PTE_U) ){
-      cprintf("Illegal virtual address on cpu %d addr 0x%x, kill proc %s with pid %d\n",
-              mycpu()->apicid, va, myproc()->name, myproc()->pid);
-      // mark the process as killed
-      myproc()->killed = 1;
-      return;
-    }
-
-    // Current page has write permissions enabled
-    if(*pte & PTE_W){
-      cprintf("error code: %x, addr 0x%x\n", err_code, va);
-      panic("Page fault already writeable");
-    }
-
-    // get the physical address from the  given page table entry
-    uint pa = PTE_ADDR(*pte);
-    // get the reference count of the current page
-    uint reference_Count = get_Page_Reference_Count(pa);
-    char *mem;
-
-    // Current process is the first one that tries to write to this page
-    if(reference_Count > 1) {
-
-        // allocate a new memory page for the process
-        if((mem = kalloc()) == 0) {
-          cprintf("Page fault out of memory, kill proc %s with pid %d\n", myproc()->name, myproc()->pid);
-          myproc()->killed = 1;
-          return;
-        }
-        // copy the contents from the original memory page pointed the virtual address
-        memmove(mem, (char*)P2V(pa), PGSIZE);
-        // point the given page table entry to the new page
-        *pte = V2P(mem) | PTE_P | PTE_U | PTE_W;
-
-        // Since the current process now doesn't point to original page,
-        // decrement the reference count by 1
-        decrease_Page_Reference_Count(pa);
-    }
-    // Current process is the last one that tries to write to this page
-    // No need to allocate new page as all other process has their copies already
-    else if(reference_Count == 1){
-      // remove the read-only restriction on the trapping page
-      *pte |= PTE_W;
-    }
-    else{
-      panic("Incorrect Page Fault Reference Count\n");
-    }
-
-    // Flush TLB for process since page table entries changed
-    lcr3(V2P(myproc()->pgdir));
-}
\ No newline at end of file
diff -urN ./cs550-19s-proj3-team-19/x86.h ./xv6-pnu-4/x86.h
--- ./cs550-19s-proj3-team-19/x86.h	2020-06-18 23:55:32.871816500 +0900
+++ ./xv6-pnu-4/x86.h	2019-05-21 23:37:15.000000000 +0900
@@ -144,13 +144,6 @@
   asm volatile("movl %0,%%cr3" : : "r" (val));
 }
 
-// CS 350/550: to solve the 100%-CPU-utilization-when-idling problem - "hlt" instruction puts CPU to sleep
-static inline void
-halt()
-{
-    asm volatile("hlt" : : :"memory");
-}
-
 //PAGEBREAK: 36
 // Layout of the trap frame built on the stack by the
 // hardware and by trapasm.S, and passed to trap().
